/*
---------------------------------------------------------
2021年3月6日17:07:22 实现一个数组
---------------------------------------------------------
*/
#include<stdlib.h>//包含了exit函数
#include<stdio.h>
#include<malloc.h>//包含了malloc函数



struct Arr//定义一个复合数据类型（结构体）
{
    int cnt ; //存放数组有效元素的个数
    int len ;//存放数组的长度
    int * pBase;//存放数组第一个元素的地址
};

void init_arr(struct Arr * array ,int length); //初始化数组函数
bool append_arr(struct Arr * ,int val); //数组元素添加
bool inser_arr(struct Arr * array , int pos , int val);//数组元素插入
bool delete_arr(struct Arr * array, int pos , int * Vpal);//数组元素删除
int get(); //数组元素提取
bool is_empty (struct Arr * array);//判断数组元素是否为空
bool is_full(struct Arr *); //判断数组是否满
void sort_arr (struct Arr * array);//数组排序
void show_arr (struct Arr * array); //输出数组中元素
void inversion_arr(struct Arr *);//数组倒置

int main (void)
{
     struct Arr arr1; int val;
    init_arr(&arr1, 6);//调用init_arr函数初始化
  
 append_arr(&arr1,-1);
 append_arr(&arr1,2);
 append_arr(&arr1,43);
 append_arr(&arr1,-4);
 append_arr(&arr1,55);
 append_arr(&arr1,6);
    //printf("添加成功\n");
    inser_arr(&arr1 , 2 , 88);
    //delete_arr(&arr1 , 1 , &val);
   // printf("删除的元素为%d",val);
    //inversion_arr(&arr1);
    show_arr(&arr1); 
    printf("排序\n");
    sort_arr(&arr1);
    show_arr(&arr1);
     return 0;

}
void init_arr(struct Arr * array ,int length)
{
  array->pBase = (int *)malloc(sizeof(int)*length);//分配动态内存地址给数组
  if (NULL == array->pBase)
  {
   printf("动态内存分配失败\n");
   exit(-1);//调用系统exit函数终止整个程序
  }
 else
 {
    array->len = length;
    array->cnt = 0;  //将还未初始化的结构体变量初始化
 }
 return;//终止初始化程序
}
bool is_empty (struct Arr * array)
{
   if (0 == array->cnt)
      return true ;
   else 
      return false;    
}
void show_arr (struct Arr * array)
{
    if( is_empty(array) ) //调用is_empty函数
    {
        printf("数组为空\n");
    } 
   else
    {
        for (int i = 0 ; i < array->cnt; i++ )
            printf("%d\n",array->pBase[i]);
            printf("\n");
    }
}
bool is_full(struct Arr * array)
{
    if(array->cnt == array->len)
    {
        return true ;
    }
    else
    {
        return false;
    }
}
bool append_arr(struct Arr * array,int val)
{
    if(is_full(array))
    {
        return false ;
    }
    //数组不满时追加
    array->pBase[array->cnt] = val;
    (array->cnt)++ ; //数组下标从零开始自增
    return true;
}
bool inser_arr(struct Arr * array , int pos , int val) //pos变量表示数组中的位置
{
   if (is_full(array))//若数组已经添加满即不成立
   return false ;
   if(pos<1 || pos>array->cnt+1)//位置不能大于最大有效元素个数+1,不能中间空出来一个位置没有值
   return false;
   for (int i = array->cnt-1; i>=pos-1; --i)//cnt-1有效元素-1表示数组下标，i先等于数组最大下标再大于等于pos位置变量，最后自减
   {
       array->pBase[i+1] = array->pBase[i];//需要把当前数组所表示下标中的值不断向后移，所以将i的值赋给i+1
   }
   array->pBase[pos-1]=val;//将值放在空出来的位置中
   (array->cnt)++;
   return true;
}
bool delete_arr(struct Arr * array, int pos , int *Vpal)
{
    if(is_empty(array));//判断数组元素是否为空
    {
        return false;
    }
    if(pos<1 || pos>array->cnt)//pos变量表示数组中的位置值，不能小于1或者大于数组中有效元素个数
    {
        return false ;
    }
    *Vpal = array->pBase[pos-1];//将删除的值赋予主函数中的变量（这里pos要变为下标所以-1）
                                //将要删除的数组中的值赋予主函数中变量，达到可以显示删除了哪个元素的效果。
    for (int i = pos; i < array->cnt; ++i)
    {
        array->pBase[i-1] = array->pBase[i];//将数组后一位的值往前赋值达到删除的目的
    }
    (array->cnt)--; //删除了元素后总体个数-1
    return true ;   
}
void inversion_arr(struct Arr * array)
{
  int i = 0 ;
  int j = array->cnt-1; //最大元素-1表示下标
  int t; 
 while (i<j)
 {
     t = array->pBase[i]; 
      array->pBase[i] = array->pBase[j];//将数组最后一个元素赋予第一个元素
      array->pBase[j] = t; //将数组第一个元素的值赋予最后一个元素
      ++i;
      --j;
 }
  return;
}
void sort_arr (struct Arr * array)//冒泡排序
{
    int i ,j , t ;
    for (i = 0; i < array->cnt; ++i) //这里i和j均表示为数组下标
    {
        for ( j = i+1; j < array->cnt; ++j)
        {
            if(array->pBase[i]>array->pBase[j])//i从数组下标0开始，j从i的后一位开始。从左到右开始遍历数组
            {                                 //若后一位（j）比前一位（i）小则将j值与i值互换。
                t = array->pBase[i]; 
               array->pBase[i] = array->pBase[j];
               array->pBase[j] = t; 
            }
        }
        
    }
    

}
